name: Deploy CloudFormation Stack and website to S3 bucket

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [ closed ]
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check stack state
        id: check_state
        run: |
          STATE=$(aws cloudformation describe-stacks --stack-name stack --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "")
          echo "STACK_STATE=$STATE" >> $GITHUB_ENV

      - name: Delete stack if in ROLLBACK_COMPLETE state
        if: env.STACK_STATE == 'ROLLBACK_COMPLETE'
        run: |
          aws cloudformation delete-stack --stack-name stack
          aws cloudformation wait stack-delete-complete --stack-name stack

      - name: Check if stack exists
        id: check_exists
        run: |
          EXISTS=$(aws cloudformation describe-stacks --stack-name stack --query "Stacks[0].StackName" --output text 2>/dev/null || echo "")
          if [ "$EXISTS" == "stack" ]; then
            echo "STACK_EXISTS=true" >> $GITHUB_ENV
          else
            echo "STACK_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Deploy or Update CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file stack/cloudformation-template.yaml \
            --stack-name stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Print CloudFormation Outputs
        run: |
          aws cloudformation describe-stacks --stack-name stack --query "Stacks[0].Outputs"

      - name: Deploy to S3 bucket
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name stack --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
          aws s3 sync src/ s3://$BUCKET_NAME --delete

      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name stack --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"


